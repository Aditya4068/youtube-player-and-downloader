
#----------------------- YOUTUBE PLAYER + DOWNLOADER -----------------------------#
#                       using PySimpleGUI GUI library


# importing all necessary libraries
from tkinter.constants import BOTH, CENTER, TRUE
from PySimpleGUI import FileBrowse, FolderBrowse
from PySimpleGUI.PySimpleGUI import DEFAULT_BASE64_LOADING_GIF
from pytube import YouTube
import PySimpleGUI as sg
import threading
import time
from pytube import streams
from ctypes import windll
windll.kernel32.SetDllDirectoryW(None)
import vlc
from sys import platform as PLATFORM
import pyperclip

# button icons
playpng = b''
pausepng = b'iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAK7UlEQVR42u3dMY6d5RWA4WPwCiIKKOwmEgou2QBVtpAyq4icwmwhGzELSI2UtJQQIWiggIIqUpQGQ4oZ0QD2CEG+88/7PNLVtEdzdK7e+Wd8PQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwG/uwekB+NU8mJnHM/PuzLx3+/XtmXljZl4/PdwCL2bmm5n5dGY+mpkPb79+MTPfnx6OY9zNy7kbWOzRzDybm2P0+mWvZ7ffRzrcjbuBy3o0M8/n/JvAfXo9H29o9527cTdwWQ9n5umcP/r7/Hp6+33m/nA37gYu7c2Z+WzOH3rh9dnt95vrczfuhp/gjwCv452Z+fj0EEFPZuaT00Pwi7mbM9zNBQiAa/AmdpY3s2tyN2e5m+UEwH5vzsxXp4dg3pqZr08PwZ25mx3czWKvnR6Al3o4M/84PQQzc7MHf+B0De5mD3ezmA+62O0vM/On00MwMzO/m5n/zMw/Tw/CK7mbPdzNYn4FsNejufm0LXZ5PDNfnh6Cn+VudnI3C/kVwF5/Oz0AP8ledrOfnexlIU8AdvJTzG5+mtnJ3ezmbpbxBGCnP58egJeyn53sZTf7WcYTgH0ezMx3p4fglV6bm08+Ywd3cw3uZhFPAPZ5fHoA7sSedrGPa7CnRQTAPu+eHoA7sadd7OMa7GkRAbDPe6cH4E7saRf7uAZ7WkQA7KOQr8GedrGPa7CnRQTAPm+fHoA7sadd7OMa7GkR/wpgn2/HRzRfwYvxGeebuJtrcDeLCIB9/BOZ63A/e7ib63A3S/gVAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSADs8+L0ANyJPe1iH9dgT4sIgH2+OT0Ad2JPu9jHNdjTIgJgn09PD8Cd2NMu9nEN9rSIANjno9MDcCf2tIt9XIM9LSIA9vnw9ADciT3tYh/XYE+LCIB9FPI12NMu9nEN9rTIg9MD8CMPZua700PwSq/NzPenh+AH7uYa3M0ingDs8/3MvH96CF7q/fEmto272c/dLOMJwE6PZuaL00Pwsx7PzJenh+BH3M1u7mYZTwB2+nJmPjg9BD/pg/EmtpW72cvdLOQJwF5+mtnJTzG7uZud3M1Cr58egJ/175n578z88fQg/OCvM/P300PwUu5mH3ezlCcAuz2cmX/NzO9PD8J8PjN/mJlvTw/CK7mbPdzNYgJgvzdn5qvTQzBvzczXp4fgztzNDu5mMX8EuN/XM/Pk9BBxT8ab2NW4m/PczXKeAFzHOzPz8ekhgp7MzCenh+AXczdnuJsL8ATgOj6Zm8dpn58eJOLzufl+exO7Nnfz/+Vu4Df0cGaezs0nann9Nq+nt99n7g93427g3ng0M8/n/NHfp9fz2+8r95e7cTdwbzyamWdz/k3gyq9n4w2sxt24mzx/BHh/PJibT9t6d2beu/369sy8MT7waWbmxcx8MzOfzs1/Sfrh7dcv5ubNjCZ383LuBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH5F/wPwl0HsGAt8UAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wNS0zMFQwODoxNzowMCswMDowMA/1w9gAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDUtMzBUMDg6MTc6MDArMDA6MDB+qHtkAAAAOXRFWHRzdmc6Y29tbWVudAAgVXBsb2FkZWQgdG8gU1ZHUmVwbyBodHRwczovL3d3dy5zdmdyZXBvLmNvbSDVsDxuAAAAAElFTkSuQmCC'
stoppng = b'iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAJj0lEQVR42u3csYpcZRyH4d/uRrcwAS/BzkoJSOy0sPIOvBZFbTRei+AV5BoS0OgV2NlHkSRILMaFJUSbuDua93mq4ePM8D/V987MOedk/+yNbW9te2/bx9s+GQDwX/bttnvbHmz7edtvLzro5G/efL7ty22fHfssAICX8vW2r7Y9ubz4ogC4ve3+thvHnhgA+Fc83vb+th8vFk6fO+CLbd/P5g8Ar5LzbQ+3fXqxcPkXgNs7bP4AwKvr3W0/XQTA+Q4XCZwdeyoA4Er9vu3Niw3/q20fHnsiAODKvbbt2cm2m9seHXsaAOD6nO5wnz8AEHK6w0N+AICQ0x2e8AcAhJxse3bsIQCA63X68h8BAPzfCAAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACDrb9va2d449CABwfU633Tv2EADA9Trd9uDYQwAA1+tk281tj449CABwfc62Pdn2+rYPjj0MAHAt7p789eJ826/bbhx7IgDgSj3dduviNsDH2+4ceyIA4Mrd2fb47NLCL9v+2PbRsScDAK7E59u+2w4XAT7v9rb783cAALwqnu7wzf/hxcKLngT4ww53Bnxz7GkBgJd2d9utXdr8t+1PLcUsEKbWo/UAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDUtMzBUMDg6MTI6MzQrMDA6MDCTHCtsAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTA1LTMwVDA4OjEyOjM0KzAwOjAw4kGT0AAAAGN0RVh0c3ZnOmNvbW1lbnQAIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTYuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgcgt1lgAAAABJRU5ErkJggg=='
previouspng = b''
nextpng = b''

# collapsible section element for playlist
def Collapsible(layout, key, title='', arrows=(sg.SYMBOL_DOWN, sg.SYMBOL_UP), collapsed=False):
    """
    User Defined Element
    A "collapsable section" element. Like a container element that can be collapsed and brought back
    :param layout:Tuple[List[sg.Element]]: The layout for the section
    :param key:Any: Key used to make this section visible / invisible
    :param title:str: Title to show next to arrow
    :param arrows:Tuple[str, str]: The strings to use to show the section is (Open, Closed).
    :param collapsed:bool: If True, then the section begins in a collapsed state
    :return:sg.Column: Column including the arrows, title and the layout that is pinned
    """
    return sg.Column([[sg.T((arrows[1] if collapsed else arrows[0]), enable_events=True, k=key+'-BUTTON-'),
                       sg.T(title, enable_events=True, key=key+'-TITLE-')],
                      [sg.pin(sg.Column(layout, key=key, visible=not collapsed, metadata=arrows), expand_x=True, expand_y=TRUE)]], pad=(0,0), vertical_alignment='top')

# button colors
BLUE = '#2196f2'
DARK_GRAY = '#212021'
LIGHT_GRAY = '#e0e0e0'
BLUE_BUTTON_COLOR = '#FFFFFF on #2196f2'
GREEN_BUTTON_COLOR ='#FFFFFF on #00c851'
RED_BUTTON_COLOR = '#FFFFFF on #961010'
LIGHT_GRAY_BUTTON_COLOR = f'#212021 on #e0e0e0'
DARK_GRAY_BUTTON_COLOR = '#e0e0e0 on #212021'

# initializing variables
# flags for error handling
flag=1 
flag2=0
animflag=0

titlelist=[] # list to store playlist

PLAYLIST_KEY= '-PLAYLIST-' # key for playlist

done = False
title = ''
streams = None

# function to download video to the file path specified
def download_thread(url,filepath) :
    global done, title
    yt = YouTube(url)       

    stream = yt.streams.first()
    stream.download(filepath)
    title = yt.title

    done = True

# function to let user choose the video quality to download in   
def get_quality(url):
    yt = YouTube(url)

    streams = yt.streams

    layout = [[sg.T('Choose Streams')]]
    for i ,s in enumerate(streams):
        layout += [[sg.CB(str(s),k=i)]]

    layout += [[sg.Ok(), sg.Cancel()]]
    event, values = sg.Window('Choose Stream', layout, resizable=True, auto_size_text=True).read(close=True)
    choices = [k for k in values if values[k]]
    if not choices:
        sg.popup_error('Must choose stream')
        global flag2
        flag2=1
        exit()

    return streams[choices[0]]


if __name__ == '__main__':

    # theme of GUI window
    sg.theme('DarkGrey14')
    sg.theme_border_width(0)

    # function to make media buttons
    def btn(name,color=LIGHT_GRAY_BUTTON_COLOR,image_data=None, key=None):  # a PySimpleGUI "User Defined Element" (see docs)
        return sg.Button(name, size=(10, 2), pad=(1, 1), button_color=color, image_data=image_data, key=key, image_subsample=30, image_size=(50,40))
    
    # title of the window
    title = 'Youtube Downloader'

    # colums to include in the layout
    right_click_menu = ['&Right', ['Copy', 'Paste']]    
    layout_column = [[sg.Text(''),btn('',LIGHT_GRAY_BUTTON_COLOR,key='previous',image_data=previouspng), btn('',LIGHT_GRAY_BUTTON_COLOR, key='pause',image_data=pausepng), btn('',LIGHT_GRAY_BUTTON_COLOR, key='play',image_data=playpng), btn('',LIGHT_GRAY_BUTTON_COLOR, key='stop',image_data=stoppng), btn('',LIGHT_GRAY_BUTTON_COLOR, key='next', image_data=nextpng)]]
    playlist_column = [[sg.Text(''),sg.Multiline(size=(50, 8), key='-OUTPUT2-', auto_size_text=True)]]
    main_column = [[sg.Text(''),sg.Text('URL', size=(15, 1)), sg.InputText(k='-URL-',right_click_menu = right_click_menu),sg.Button('Load', size=(6, 1))],
                [sg.Text(''),sg.Text('Download Folder',size=(15,1)),sg.InputText(k='-FOLDER-'),FolderBrowse(button_text="Browse", size=(6, 1)),sg.Text('')],
                [sg.Text(size=(60, 2), key='-OUTPUT-')],
                [sg.Text(''),sg.Button('Download', size=(10, 2)), sg.Button('Quit', size=(10, 2)),
                 sg.Image(data=sg.DEFAULT_BASE64_LOADING_GIF, enable_events=True, key='-IMAGE-',visible=False)],
                [sg.Text('')],]
    options_column = [[sg.Button(button_text="mute", key='mute'), sg.Button("1x", key='1x', disabled=True, disabled_button_color=("black","white")), sg.Button("2x", key='2x', disabled_button_color=("black","white"))]]
       
    # layout of the window
    layout =    [
                [sg.Text('')],
                [sg.Column(main_column), Collapsible(playlist_column, PLAYLIST_KEY, 'Playlist', collapsed=True),sg.Text('  ')],
                [sg.Image('', size=(300, 400), key='-VID_OUT-', background_color='black')],
                [sg.Slider(range=(0, 1), enable_events=True, resolution=0.0001, disable_number_display=True, orientation='h', key='TIME', background_color='white')],
                [sg.Column(layout_column, justification='center')],
                [sg.Column(options_column, justification='c')],
                [sg.Text(''),sg.Text('Load media to start', key='-MESSAGE_AREA-'), sg.Text(''), sg.Text('',size=(100,1),key='tracktitle')]]

    # window creation
    window = sg.Window(title, layout, resizable=True, no_titlebar=False, grab_anywhere=True, keep_on_top=False, margins=(0,0), finalize=True)
    window['-VID_OUT-'].expand(True, True) 
    window['TIME'].expand(expand_x=True,expand_row=False)
 

    #------------ Media Player Setup ---------#

    inst = vlc.Instance()
    list_player = inst.media_list_player_new()
    media_list = inst.media_list_new([])
    list_player.set_media_list(media_list)
    player = list_player.get_media_player()
    if PLATFORM.startswith('linux'):
        player.set_xwindow(window['-VID_OUT-'].Widget.winfo_id())
    else:
        player.set_hwnd(window['-VID_OUT-'].Widget.winfo_id())
    player.audio_set_mute(False)

    #------------ The Event Loop ------------#


    while True:
        event, values = window.read(timeout=1000)
        if event == 'Quit' or event == sg.WIN_CLOSED:
            break
        if event == 'Download':             
            try:
                stream = get_quality(values['-URL-'])
                flag=0
                done = False
                thread = threading.Thread(target=download_thread, args=(values['-URL-'],values['-FOLDER-']), daemon=True)
                thread.start()
                window['-IMAGE-'].update(visible=not window['-IMAGE-'].visible)
                
            except:
                done = True
                flag=1
                if (flag2!=1):
                    sg.popup_error("Invalid Youtube URL")
                else: flag2=0
            
            while not done:
                flag=0
                window['-IMAGE-'].update_animation(sg.DEFAULT_BASE64_LOADING_GIF,  time_between_frames=100)
                animflag=1
                window.refresh()
            if (animflag!=1):
                continue   
            window['-IMAGE-'].update(visible=not window['-IMAGE-'].visible)

        if (flag == 0):
            window['-OUTPUT-'].update(title + ' has finished downloading')
        
        if event=='Paste':
            window['-URL-'].update(pyperclip.paste())
        
        if event=='Copy':
            pyperclip.copy(values['-URL-'])

        if event.startswith(PLAYLIST_KEY):
            window[PLAYLIST_KEY].update(visible=not window[PLAYLIST_KEY].visible)
            window[PLAYLIST_KEY+'-BUTTON-'].update(window[PLAYLIST_KEY].metadata[0] if window[PLAYLIST_KEY].visible else window[PLAYLIST_KEY].metadata[1])
        
        if event == 'play':
            list_player.play()
            window['play'].update(button_color=GREEN_BUTTON_COLOR)
            window['pause'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
            window['stop'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
        if event == 'pause':
            list_player.pause()
            window['play'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
            window['pause'].update(button_color=BLUE_BUTTON_COLOR)
            window['stop'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
        if event == 'stop':
            list_player.stop()
            window['stop'].update(button_color=RED_BUTTON_COLOR)
            window['play'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
            window['pause'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)
        if event == 'next':
            list_player.next()
            list_player.play()
        if event == 'previous':
            list_player.previous()      # first call causes current video to start over
            list_player.previous()      # second call moves back 1 video from current
            list_player.play()
        if event == 'mute':
            '''value = player.audio_get_volume()
            if (value==0):
                player.audio_set_volume(100)
                window['mute'].update(text='mute')
            else: 
                player.audio_set_volume(0)
                window['mute'].update(text='unmute')'''
            player.audio_set_mute(not player.audio_get_mute())
            if player.audio_get_mute():
                window['mute'].update(text='mute')
            else:
                window['mute'].update(text='unmute')
        if event == '1x':
                player.set_rate(1)
                window['1x'].update(disabled=True)
                window['2x'].update(disabled=False)
        if event == '2x':
                player.set_rate(2)
                window['1x'].update(disabled=False)
                window['2x'].update(disabled=True)
        if event == 'Load':
            if values['-URL-'] and not 'Video URL' in values['-URL-']:
                               
                try : 
                    media = inst.media_new(values['-URL-'])
                    yt2 = YouTube(values['-URL-'])
                    title2=yt2.title
                    author2=yt2.author
                    media.set_meta(0, title2)
                    media.set_meta(0, author2)
                    media_list.add_media(media)
                    list_player.set_media_list(media_list)
                    
                    titlelist.append(title2)
                    string=''
                    for i in range (0,len(titlelist)):
                        string=string+str(i+1)+". "+titlelist[i]+"\n"  
                    window['-OUTPUT2-'].update(string)
                except: sg.popup_error('Invalid URL')
        if event == 'TIME':
            player.set_position(values['TIME'])

        # update elapsed time, duration bar, track title if there is a video loaded and the player is playing
        if player.is_playing():
            window['-MESSAGE_AREA-'].update("{:02d}:{:02d} / {:02d}:{:02d}".format(*divmod(player.get_time()//1000, 60),
                                                                        *divmod(player.get_length()//1000, 60)))
            window['TIME'].update(player.get_position())
            window['play'].update(button_color=GREEN_BUTTON_COLOR)
            window['pause'].update(button_color=LIGHT_GRAY_BUTTON_COLOR)

            media=player.get_media()
            window['tracktitle'].update(str(media.get_meta(0)) + " | " + str(media.get_meta(1)))
        else:
            window['-MESSAGE_AREA-'].update('Load media to start' if media_list.count() == 0 else 'Ready to play media' )           
        window.refresh()
window.close()